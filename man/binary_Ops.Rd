% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/group_methods.R
\name{binary_Ops}
\alias{binary_Ops}
\title{Binary Ops Groups Methods}
\usage{
binary_Ops(x, Ops, y, times = "all", interpolation = "last")
}
\arguments{
\item{x, y}{\code{\link{uts}} objects.}

\item{Ops}{a binary \code{\link{Ops}} operator.}

\item{times}{which observation times to use for the output time series: \itemize{
   \item \code{"all"}: the union of observation times of \code{x} and \code{y}.
   \item \code{"x"}: the observation times of \code{x}.
   \item \code{"y"}: the observation times of \code{y}.
}
In all three cases, times before the first observation time (i.e. the start time) of either time series are excluded. \cr
The method for determining these times is unaffected by numerical noise less than \code{sqrt(\link[=.Machine]{.Machine$double.eps})}.}

\item{interpolation}{either \code{"last"} or \code{"linear"}, denoting the interpolation method to use for sampling from \code{x} and \code{y}. See \code{\link{sample_values}} for a detailed description of the two methods.}
}
\description{
Apply a binary \code{\link{Ops}} group method to the observation values of \code{"uts"} objects.
}
\note{
\code{\link{Ops.uts}}, when using a binary operator, is a special case of this method. Specifically, \code{x+y} gives the same result as \code{binary_Ops(x, "+", y, times="all", interpolation="last")}, and the same is true for the other binary \code{"Ops"} group\code{\link{Ops}} methods.

For output times that are observation times of \code{x} (or \code{y}), the interpolation method has no effect, because the sampled value at such a time point is simply the observation value of \code{x} (or \code{y}) at this time point. In particular, the \code{interpolation} argument has no effect for \code{times="all"} (the default).
}
\examples{

# Create two sample time series
x <- ex_uts()
y <- head(lag_t(x * 1.1, dhours(1)), 5)

# Vary binary operator
binary_Ops(x, "/", y)
binary_Ops(x, "-", y)
binary_Ops(x, "!=", y)

# Vary time points in output
binary_Ops(x, "/", y)
binary_Ops(x, "/", y, times="x")
binary_Ops(x, "/", y, times="y")

# Vary interpolation method
binary_Ops(x, "/", y, times="x")
binary_Ops(x, "/", y, times="x", interpolation="linear")
}
\seealso{
\code{\link{Ops.uts}}, \code{\link{groupGeneric}}
}

